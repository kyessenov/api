// Code generated by protoc-gen-go.
// source: proxy/v1/config/route_rule.proto
// DO NOT EDIT!

package istio_proxy_v1_config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ### Glossary & concepts
//
// *Service* is a unit of an application with a unique name that other services
// use to refer to the functionality being called. Service instances are
// pods/VMs/containers that implement the service.
//
// *Service versions* - In a continuous deployment scenario, for a given service,
// there can be multiple sets of instances running potentially different
// variants of the application binary. These variants are not necessarily
// different API versions. They could be iterative changes to the same service,
// deployed in different environments (prod, staging, dev, etc.). Common
// scenarios where this occurs include A/B testing, canary rollouts, etc. The
// choice of a particular version can be decided based on various criterion
// (headers, url, etc.) and/or by weights assigned to each version.  Each
// service has a default version consisting of all its instances.
//
// *Source* - downstream client (browser or another service) calling the
// Envoy proxy/sidecar (typically to reach another service).
//
// *Destination* - The remote upstream service to which the Envoy proxy/sidecar is
// talking to, on behalf of the source service. There can be one or more
// service versions for a given service (see the discussion on versions above).
// Envoy would choose the version based on various routing rules.
//
// *Access model* - Applications address only the destination service
// without knowledge of individual service versions. The actual choice of
// the version is determined by Envoy, enabling the application code to
// decouple itself from the evolution of dependent services.
//
//
//
// Route rule provides a custom routing policy based on the source and
// destination service versions and connection/request metadata.  The rule
// must provide a set of conditions for each protocol (TCP, UDP, HTTP) that
// the destination service exposes on its ports.
//
// The rule applies only to the ports on the destination service for which
// it provides protocol-specific match condition, e.g. if the rule does not
// specify TCP condition, the rule does not apply to TCP traffic towards
// the destination service.
//
// For example, a simple rule to send 100% of incoming traffic for a
// "reviews" service to version "v1" can be specified as follows:
//
//     destination: reviews.default.svc.cluster.local
//     name: my-rule
//     route:
//     - tags:
//         version: v1
//       weight: 100
//
type RouteRule struct {
	// REQUIRED: Route rules have unique names to allow multiple rules
	// for the same destination, e.g. "my-rule".
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// REQUIRED: Destination uniquely identifies the destination associated
	// with this routing rule.  This field is applicable for hostname-based
	// resolution for HTTP traffic as well as IP-based resolution for
	// TCP/UDP traffic. The value MUST BE a fully-qualified domain name,
	// e.g. "my-service.default.svc.cluster.local".
	Destination string `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
	// RECOMMENDED. Precedence is used to disambiguate the order of
	// application of rules for the same destination service. A higher number
	// takes priority. If not specified, the value is assumed to be 0.  The
	// order of application for rules with the same precedence is
	// unspecified.
	Precedence int32 `protobuf:"varint,3,opt,name=precedence" json:"precedence,omitempty"`
	// Match condtions to be satisfied for the route rule to be
	// activated. If match is omitted, the route rule applies only to HTTP
	// traffic.
	Match *MatchCondition `protobuf:"bytes,4,opt,name=match" json:"match,omitempty"`
	// REQUIRED (route|redirect). A routing rule can either redirect traffic or
	// forward traffic. The forwarding target can be one of several versions
	// of a service (see glossary in beginning of document). Weights
	// associated with the service version determine the proportion of
	// traffic it receives.
	Route []*DestinationWeight `protobuf:"bytes,5,rep,name=route" json:"route,omitempty"`
	// REQUIRED (route|redirect). A routing rule can either redirect traffic or
	// forward traffic. The redirect primitive can be used to send a HTTP 302
	// redirect to a different URI or Authority.
	Redirect *HTTPRedirect `protobuf:"bytes,6,opt,name=redirect" json:"redirect,omitempty"`
	// Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
	// Redirect primitive. Rewrite will be performed before forwarding.
	Rewrite *HTTPRewrite `protobuf:"bytes,7,opt,name=rewrite" json:"rewrite,omitempty"`
	// Indicates that a HTTP/1.1 client connection to this particular route
	// should be allowed (and expected) to upgrade to a WebSocket connection.
	// The default is false. Envoy expects the first request to this route
	// to contain the WebSocket upgrade headers. Otherwise, the request
	// will be rejected.
	WebsocketUpgrade bool `protobuf:"varint,8,opt,name=websocket_upgrade,json=websocketUpgrade" json:"websocket_upgrade,omitempty"`
	// Timeout policy for HTTP requests.
	HttpReqTimeout *HTTPTimeout `protobuf:"bytes,9,opt,name=http_req_timeout,json=httpReqTimeout" json:"http_req_timeout,omitempty"`
	// Retry policy for HTTP requests.
	HttpReqRetries *HTTPRetry `protobuf:"bytes,10,opt,name=http_req_retries,json=httpReqRetries" json:"http_req_retries,omitempty"`
	// Fault injection policy to apply on HTTP traffic
	HttpFault *HTTPFaultInjection `protobuf:"bytes,11,opt,name=http_fault,json=httpFault" json:"http_fault,omitempty"`
	// (-- L4 fault injection policy applies to Tcp/Udp (not HTTP) traffic --)
	L4Fault *L4FaultInjection `protobuf:"bytes,12,opt,name=l4_fault,json=l4Fault" json:"l4_fault,omitempty"`
}

func (m *RouteRule) Reset()                    { *m = RouteRule{} }
func (m *RouteRule) String() string            { return proto.CompactTextString(m) }
func (*RouteRule) ProtoMessage()               {}
func (*RouteRule) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *RouteRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RouteRule) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *RouteRule) GetPrecedence() int32 {
	if m != nil {
		return m.Precedence
	}
	return 0
}

func (m *RouteRule) GetMatch() *MatchCondition {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *RouteRule) GetRoute() []*DestinationWeight {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *RouteRule) GetRedirect() *HTTPRedirect {
	if m != nil {
		return m.Redirect
	}
	return nil
}

func (m *RouteRule) GetRewrite() *HTTPRewrite {
	if m != nil {
		return m.Rewrite
	}
	return nil
}

func (m *RouteRule) GetWebsocketUpgrade() bool {
	if m != nil {
		return m.WebsocketUpgrade
	}
	return false
}

func (m *RouteRule) GetHttpReqTimeout() *HTTPTimeout {
	if m != nil {
		return m.HttpReqTimeout
	}
	return nil
}

func (m *RouteRule) GetHttpReqRetries() *HTTPRetry {
	if m != nil {
		return m.HttpReqRetries
	}
	return nil
}

func (m *RouteRule) GetHttpFault() *HTTPFaultInjection {
	if m != nil {
		return m.HttpFault
	}
	return nil
}

func (m *RouteRule) GetL4Fault() *L4FaultInjection {
	if m != nil {
		return m.L4Fault
	}
	return nil
}

// Match condition specifies a set of criterion to be met in order for the
// route rule to be applied to the connection or HTTP request.  The
// condition provides distinct set of conditions for each protocol with the
// intention that conditions apply only to the service ports that match the
// protocol. For example, the following route rule restricts the rule to
// match only requests originating from "reviews:v2", accessing ratings
// service where the URL path starts with /ratings/v2/ and the request
// contains a "cookie" with value "user=jason",
//
//     destination: ratings.default.svc.cluster.local
//     name: my-rule
//     match:
//       source: reviews.default.svc.cluster.local
//       sourceTags:
//         version: v2
//       httpHeaders:
//         cookie:
//           regex: "^(.*?;)?(user=jason)(;.*)?$"
//         uri:
//           prefix: "/ratings/v2/"
//
// MatchCondition CANNOT BE empty. Atleast one of source, source_tags or
// http_headers must be specified.
type MatchCondition struct {
	// Identifies the service initiating a connection or a request by its
	// name. If specified, name MUST BE a fully qualified domain name such
	// as foo.bar.com
	Source string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	// One or more tags that uniquely identify the source service version. In
	// Kubernetes, tags correspond to the labels associated with pods.
	SourceTags map[string]string `protobuf:"bytes,2,rep,name=source_tags,json=sourceTags" json:"source_tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// (-- Set of layer 4 match conditions based on the IP ranges --)
	Tcp *L4MatchAttributes `protobuf:"bytes,3,opt,name=tcp" json:"tcp,omitempty"`
	// (-- Set of layer 4 match conditions based on the IP ranges --)
	Udp *L4MatchAttributes `protobuf:"bytes,4,opt,name=udp" json:"udp,omitempty"`
	// Set of HTTP match conditions based on HTTP/1.1, HTTP/2, GRPC request
	// metadata, such as _uri_, _scheme_, _authority_.  The header keys must be
	// lowercase and use hyphen as the separator, e.g. _x-request-id_.
	//
	// *Note 1:* The keys _uri_, _scheme_, _method_, and _authority_ correspond
	// to URI, protocol scheme (e.g., HTTP, HTTPS), HTTP method
	// (e.g., GET, POST), and the HTTP Host header respectively.
	//
	// *Note 2:* _uri_ can be used to perform URL matches. For URL matches
	// (_uri_), only prefix and exact (see StringMatch) matches are
	// supported. For other HTTP headers, exact, prefix and ECMA style
	// regular expression matches are supported.
	HttpHeaders map[string]*StringMatch `protobuf:"bytes,5,rep,name=http_headers,json=httpHeaders" json:"http_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MatchCondition) Reset()                    { *m = MatchCondition{} }
func (m *MatchCondition) String() string            { return proto.CompactTextString(m) }
func (*MatchCondition) ProtoMessage()               {}
func (*MatchCondition) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *MatchCondition) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *MatchCondition) GetSourceTags() map[string]string {
	if m != nil {
		return m.SourceTags
	}
	return nil
}

func (m *MatchCondition) GetTcp() *L4MatchAttributes {
	if m != nil {
		return m.Tcp
	}
	return nil
}

func (m *MatchCondition) GetUdp() *L4MatchAttributes {
	if m != nil {
		return m.Udp
	}
	return nil
}

func (m *MatchCondition) GetHttpHeaders() map[string]*StringMatch {
	if m != nil {
		return m.HttpHeaders
	}
	return nil
}

// Each routing rule is associated with one or more service versions (see
// glossary in beginning of document). Weights associated with the version
// determine the proportion of traffic it receives. For example, the
// following rule will route 25% of traffic for the "reviews" service to
// instances with the "v2" tag and the remaining traffic (i.e., 75%) to
// "v1".
//
//     destination: reviews.default.svc.cluster.local
//     name: my-rule
//     route:
//     - tags:
//         version: v2
//       weight: 25
//     - tags:
//         version: v1
//       weight: 75
//
type DestinationWeight struct {
	// Destination uniquely identifies the destination service. If not
	// specified, the value is inherited from the parent route rule. Value
	// must be in fully qualified domain name format (e.g.,
	// "my-service.default.svc.cluster.local").
	Destination string `protobuf:"bytes,1,opt,name=destination" json:"destination,omitempty"`
	// Service version identifier for the destination service.
	// (-- N.B. The map is used instead of pstruct due to lack of serialization support
	// in golang protobuf library (see https://github.com/golang/protobuf/pull/208) --)
	Tags map[string]string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// REQUIRED. The proportion of traffic to be forwarded to the service
	// version. (0-100). Sum of weights across destinations SHOULD BE ==
	// 100. If there is only destination in a rule, the weight value is
	// assumed to be 100.
	Weight int32 `protobuf:"varint,3,opt,name=weight" json:"weight,omitempty"`
}

func (m *DestinationWeight) Reset()                    { *m = DestinationWeight{} }
func (m *DestinationWeight) String() string            { return proto.CompactTextString(m) }
func (*DestinationWeight) ProtoMessage()               {}
func (*DestinationWeight) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *DestinationWeight) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *DestinationWeight) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *DestinationWeight) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// (-- L4 connection match attributes. Note that L4 connection matching
// support is incomplete. --)
type L4MatchAttributes struct {
	// IPv4 or IPv6 ip address with optional subnet. E.g., a.b.c.d/xx form or
	// just a.b.c.d
	SourceSubnet []string `protobuf:"bytes,1,rep,name=source_subnet,json=sourceSubnet" json:"source_subnet,omitempty"`
	// IPv4 or IPv6 ip address of destination with optional subnet.
	// E.g., a.b.c.d/xx form or just a.b.c.d. This is only valid when the destination
	// service has several IPs and the application explicitly specifies a particular IP.
	DestinationSubnet []string `protobuf:"bytes,2,rep,name=destination_subnet,json=destinationSubnet" json:"destination_subnet,omitempty"`
}

func (m *L4MatchAttributes) Reset()                    { *m = L4MatchAttributes{} }
func (m *L4MatchAttributes) String() string            { return proto.CompactTextString(m) }
func (*L4MatchAttributes) ProtoMessage()               {}
func (*L4MatchAttributes) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *L4MatchAttributes) GetSourceSubnet() []string {
	if m != nil {
		return m.SourceSubnet
	}
	return nil
}

func (m *L4MatchAttributes) GetDestinationSubnet() []string {
	if m != nil {
		return m.DestinationSubnet
	}
	return nil
}

// HTTPRedirect can be used to send a 302 redirect response to the caller,
// where the Authority/Host and the URI in the response can be swapped with
// the specified values. For example, the following route rule redirects
// requests for /v1/getProductRatings API on the ratings service to
// /v1/bookRatings provided by the bookratings service.
//
//     destination: ratings.default.svc.cluster.local
//     name: my-rule
//     match:
//       httpHeaders:
//         uri:
//          exact: /v1/getProductRatings
//     redirect:
//       uri: /v1/bookRatings
//       authority: bookratings.default.svc.cluster.local
//
type HTTPRedirect struct {
	// On a redirect, overwrite the Path portion of the URL with this
	// value. Note that the entire path will be replaced, irrespective of the
	// request URI being matched as an exact path or prefix.
	Uri string `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	// On a redirect, overwrite the Authority/Host portion of the URL with
	// this value
	Authority string `protobuf:"bytes,2,opt,name=authority" json:"authority,omitempty"`
}

func (m *HTTPRedirect) Reset()                    { *m = HTTPRedirect{} }
func (m *HTTPRedirect) String() string            { return proto.CompactTextString(m) }
func (*HTTPRedirect) ProtoMessage()               {}
func (*HTTPRedirect) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *HTTPRedirect) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *HTTPRedirect) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// HTTPRewrite can be used to rewrite specific parts of a HTTP request
// before forwarding the request to the destination. Rewrite primitive can
// be used only with the DestinationWeights. The following example
// demonstrates how to rewrite the URL prefix for api call (/ratings) to
// ratings service before making the actual API call.
//
//     destination: ratings.default.svc.cluster.local
//     name: my-rule
//     match:
//       httpHeaders:
//         uri:
//          prefix: /ratings
//     rewrite:
//       uri: /v1/bookRatings
//     route:
//     - tags:
//         version: v1
//
type HTTPRewrite struct {
	// rewrite the Path (or the prefix) portion of the URI with this
	// value. If the original URI was matched based on prefix, the value
	// provided in this field will replace the corresponding matched prefix.
	Uri string `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	// rewrite the Authority/Host header with this value.
	Authority string `protobuf:"bytes,2,opt,name=authority" json:"authority,omitempty"`
}

func (m *HTTPRewrite) Reset()                    { *m = HTTPRewrite{} }
func (m *HTTPRewrite) String() string            { return proto.CompactTextString(m) }
func (*HTTPRewrite) ProtoMessage()               {}
func (*HTTPRewrite) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *HTTPRewrite) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *HTTPRewrite) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// Describes how to match a given string in HTTP headers. Match is case-sensitive.
type StringMatch struct {
	// Types that are valid to be assigned to MatchType:
	//	*StringMatch_Exact
	//	*StringMatch_Prefix
	//	*StringMatch_Regex
	MatchType isStringMatch_MatchType `protobuf_oneof:"match_type"`
}

func (m *StringMatch) Reset()                    { *m = StringMatch{} }
func (m *StringMatch) String() string            { return proto.CompactTextString(m) }
func (*StringMatch) ProtoMessage()               {}
func (*StringMatch) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

type isStringMatch_MatchType interface {
	isStringMatch_MatchType()
}

type StringMatch_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,oneof"`
}
type StringMatch_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,oneof"`
}
type StringMatch_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,oneof"`
}

func (*StringMatch_Exact) isStringMatch_MatchType()  {}
func (*StringMatch_Prefix) isStringMatch_MatchType() {}
func (*StringMatch_Regex) isStringMatch_MatchType()  {}

func (m *StringMatch) GetMatchType() isStringMatch_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (m *StringMatch) GetExact() string {
	if x, ok := m.GetMatchType().(*StringMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *StringMatch) GetPrefix() string {
	if x, ok := m.GetMatchType().(*StringMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *StringMatch) GetRegex() string {
	if x, ok := m.GetMatchType().(*StringMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StringMatch) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StringMatch_OneofMarshaler, _StringMatch_OneofUnmarshaler, _StringMatch_OneofSizer, []interface{}{
		(*StringMatch_Exact)(nil),
		(*StringMatch_Prefix)(nil),
		(*StringMatch_Regex)(nil),
	}
}

func _StringMatch_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StringMatch)
	// match_type
	switch x := m.MatchType.(type) {
	case *StringMatch_Exact:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Exact)
	case *StringMatch_Prefix:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Prefix)
	case *StringMatch_Regex:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Regex)
	case nil:
	default:
		return fmt.Errorf("StringMatch.MatchType has unexpected type %T", x)
	}
	return nil
}

func _StringMatch_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StringMatch)
	switch tag {
	case 1: // match_type.exact
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Exact{x}
		return true, err
	case 2: // match_type.prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Prefix{x}
		return true, err
	case 3: // match_type.regex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Regex{x}
		return true, err
	default:
		return false, nil
	}
}

func _StringMatch_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StringMatch)
	// match_type
	switch x := m.MatchType.(type) {
	case *StringMatch_Exact:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Exact)))
		n += len(x.Exact)
	case *StringMatch_Prefix:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Prefix)))
		n += len(x.Prefix)
	case *StringMatch_Regex:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Regex)))
		n += len(x.Regex)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Describes HTTP request timeout. For example, the following rule sets a
// 10 second timeout for calls to the ratings:v1 service
//
//     destination: ratings.default.svc.cluster.local
//     name: my-rule
//     route:
//     - tags:
//         version: v1
//     httpReqTimeout:
//       simpleTimeout:
//         timeout: 10s
//
type HTTPTimeout struct {
	// Types that are valid to be assigned to TimeoutPolicy:
	//	*HTTPTimeout_SimpleTimeout
	//	*HTTPTimeout_Custom
	TimeoutPolicy isHTTPTimeout_TimeoutPolicy `protobuf_oneof:"timeout_policy"`
}

func (m *HTTPTimeout) Reset()                    { *m = HTTPTimeout{} }
func (m *HTTPTimeout) String() string            { return proto.CompactTextString(m) }
func (*HTTPTimeout) ProtoMessage()               {}
func (*HTTPTimeout) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

type isHTTPTimeout_TimeoutPolicy interface {
	isHTTPTimeout_TimeoutPolicy()
}

type HTTPTimeout_SimpleTimeout struct {
	SimpleTimeout *HTTPTimeout_SimpleTimeoutPolicy `protobuf:"bytes,1,opt,name=simple_timeout,json=simpleTimeout,oneof"`
}
type HTTPTimeout_Custom struct {
	Custom *google_protobuf.Any `protobuf:"bytes,2,opt,name=custom,oneof"`
}

func (*HTTPTimeout_SimpleTimeout) isHTTPTimeout_TimeoutPolicy() {}
func (*HTTPTimeout_Custom) isHTTPTimeout_TimeoutPolicy()        {}

func (m *HTTPTimeout) GetTimeoutPolicy() isHTTPTimeout_TimeoutPolicy {
	if m != nil {
		return m.TimeoutPolicy
	}
	return nil
}

func (m *HTTPTimeout) GetSimpleTimeout() *HTTPTimeout_SimpleTimeoutPolicy {
	if x, ok := m.GetTimeoutPolicy().(*HTTPTimeout_SimpleTimeout); ok {
		return x.SimpleTimeout
	}
	return nil
}

func (m *HTTPTimeout) GetCustom() *google_protobuf.Any {
	if x, ok := m.GetTimeoutPolicy().(*HTTPTimeout_Custom); ok {
		return x.Custom
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HTTPTimeout) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HTTPTimeout_OneofMarshaler, _HTTPTimeout_OneofUnmarshaler, _HTTPTimeout_OneofSizer, []interface{}{
		(*HTTPTimeout_SimpleTimeout)(nil),
		(*HTTPTimeout_Custom)(nil),
	}
}

func _HTTPTimeout_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HTTPTimeout)
	// timeout_policy
	switch x := m.TimeoutPolicy.(type) {
	case *HTTPTimeout_SimpleTimeout:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SimpleTimeout); err != nil {
			return err
		}
	case *HTTPTimeout_Custom:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Custom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HTTPTimeout.TimeoutPolicy has unexpected type %T", x)
	}
	return nil
}

func _HTTPTimeout_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HTTPTimeout)
	switch tag {
	case 1: // timeout_policy.simple_timeout
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HTTPTimeout_SimpleTimeoutPolicy)
		err := b.DecodeMessage(msg)
		m.TimeoutPolicy = &HTTPTimeout_SimpleTimeout{msg}
		return true, err
	case 2: // timeout_policy.custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.TimeoutPolicy = &HTTPTimeout_Custom{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HTTPTimeout_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HTTPTimeout)
	// timeout_policy
	switch x := m.TimeoutPolicy.(type) {
	case *HTTPTimeout_SimpleTimeout:
		s := proto.Size(x.SimpleTimeout)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HTTPTimeout_Custom:
		s := proto.Size(x.Custom)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HTTPTimeout_SimpleTimeoutPolicy struct {
	// REQUIRED. Timeout for a HTTP request. Includes retries as well.  Default
	// 15s. format: 1h/1m/1s/1ms. MUST BE >=1ms. It is possible to control
	// timeout per request by supplying the timeout value via
	// x-envoy-upstream-rq-timeout-ms HTTP header.
	Timeout *google_protobuf1.Duration `protobuf:"bytes,1,opt,name=timeout" json:"timeout,omitempty"`
	// (-- Downstream service could specify timeout via Http header to
	// Envoy, if Envoy supports such a feature. --)
	OverrideHeaderName string `protobuf:"bytes,2,opt,name=override_header_name,json=overrideHeaderName" json:"override_header_name,omitempty"`
}

func (m *HTTPTimeout_SimpleTimeoutPolicy) Reset()         { *m = HTTPTimeout_SimpleTimeoutPolicy{} }
func (m *HTTPTimeout_SimpleTimeoutPolicy) String() string { return proto.CompactTextString(m) }
func (*HTTPTimeout_SimpleTimeoutPolicy) ProtoMessage()    {}
func (*HTTPTimeout_SimpleTimeoutPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{7, 0}
}

func (m *HTTPTimeout_SimpleTimeoutPolicy) GetTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *HTTPTimeout_SimpleTimeoutPolicy) GetOverrideHeaderName() string {
	if m != nil {
		return m.OverrideHeaderName
	}
	return ""
}

// Describes the retry policy to use when a HTTP request fails. For
// example, the following rule sets the maximum number of retries to 3 when
// calling ratings:v1 service, with a 2s timeout per retry attempt.
//
//     destination: ratings.default.svc.cluster.local
//     name: my-rule
//     route:
//     - tags:
//         version: v1
//     httpReqRetries:
//       simpleRetry:
//         attempts: 3
//         perTryTimeout: 2s
//
type HTTPRetry struct {
	// Types that are valid to be assigned to RetryPolicy:
	//	*HTTPRetry_SimpleRetry
	//	*HTTPRetry_Custom
	RetryPolicy isHTTPRetry_RetryPolicy `protobuf_oneof:"retry_policy"`
}

func (m *HTTPRetry) Reset()                    { *m = HTTPRetry{} }
func (m *HTTPRetry) String() string            { return proto.CompactTextString(m) }
func (*HTTPRetry) ProtoMessage()               {}
func (*HTTPRetry) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

type isHTTPRetry_RetryPolicy interface {
	isHTTPRetry_RetryPolicy()
}

type HTTPRetry_SimpleRetry struct {
	SimpleRetry *HTTPRetry_SimpleRetryPolicy `protobuf:"bytes,1,opt,name=simple_retry,json=simpleRetry,oneof"`
}
type HTTPRetry_Custom struct {
	Custom *google_protobuf.Any `protobuf:"bytes,2,opt,name=custom,oneof"`
}

func (*HTTPRetry_SimpleRetry) isHTTPRetry_RetryPolicy() {}
func (*HTTPRetry_Custom) isHTTPRetry_RetryPolicy()      {}

func (m *HTTPRetry) GetRetryPolicy() isHTTPRetry_RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *HTTPRetry) GetSimpleRetry() *HTTPRetry_SimpleRetryPolicy {
	if x, ok := m.GetRetryPolicy().(*HTTPRetry_SimpleRetry); ok {
		return x.SimpleRetry
	}
	return nil
}

func (m *HTTPRetry) GetCustom() *google_protobuf.Any {
	if x, ok := m.GetRetryPolicy().(*HTTPRetry_Custom); ok {
		return x.Custom
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HTTPRetry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HTTPRetry_OneofMarshaler, _HTTPRetry_OneofUnmarshaler, _HTTPRetry_OneofSizer, []interface{}{
		(*HTTPRetry_SimpleRetry)(nil),
		(*HTTPRetry_Custom)(nil),
	}
}

func _HTTPRetry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HTTPRetry)
	// retry_policy
	switch x := m.RetryPolicy.(type) {
	case *HTTPRetry_SimpleRetry:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SimpleRetry); err != nil {
			return err
		}
	case *HTTPRetry_Custom:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Custom); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HTTPRetry.RetryPolicy has unexpected type %T", x)
	}
	return nil
}

func _HTTPRetry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HTTPRetry)
	switch tag {
	case 1: // retry_policy.simple_retry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HTTPRetry_SimpleRetryPolicy)
		err := b.DecodeMessage(msg)
		m.RetryPolicy = &HTTPRetry_SimpleRetry{msg}
		return true, err
	case 2: // retry_policy.custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.RetryPolicy = &HTTPRetry_Custom{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HTTPRetry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HTTPRetry)
	// retry_policy
	switch x := m.RetryPolicy.(type) {
	case *HTTPRetry_SimpleRetry:
		s := proto.Size(x.SimpleRetry)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HTTPRetry_Custom:
		s := proto.Size(x.Custom)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HTTPRetry_SimpleRetryPolicy struct {
	// REQUIRED. Number of retries for a given request. The interval
	// between retries will be determined automatically (25ms+). Actual
	// number of retries attempted depends on the httpReqTimeout.
	Attempts int32 `protobuf:"varint,1,opt,name=attempts" json:"attempts,omitempty"`
	// Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.
	PerTryTimeout *google_protobuf1.Duration `protobuf:"bytes,2,opt,name=per_try_timeout,json=perTryTimeout" json:"per_try_timeout,omitempty"`
	// (-- Downstream Service could specify retry attempts via Http header to
	// Envoy, if Envoy supports such a feature. --)
	OverrideHeaderName string `protobuf:"bytes,3,opt,name=override_header_name,json=overrideHeaderName" json:"override_header_name,omitempty"`
}

func (m *HTTPRetry_SimpleRetryPolicy) Reset()                    { *m = HTTPRetry_SimpleRetryPolicy{} }
func (m *HTTPRetry_SimpleRetryPolicy) String() string            { return proto.CompactTextString(m) }
func (*HTTPRetry_SimpleRetryPolicy) ProtoMessage()               {}
func (*HTTPRetry_SimpleRetryPolicy) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8, 0} }

func (m *HTTPRetry_SimpleRetryPolicy) GetAttempts() int32 {
	if m != nil {
		return m.Attempts
	}
	return 0
}

func (m *HTTPRetry_SimpleRetryPolicy) GetPerTryTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.PerTryTimeout
	}
	return nil
}

func (m *HTTPRetry_SimpleRetryPolicy) GetOverrideHeaderName() string {
	if m != nil {
		return m.OverrideHeaderName
	}
	return ""
}

func init() {
	proto.RegisterType((*RouteRule)(nil), "istio.proxy.v1.config.RouteRule")
	proto.RegisterType((*MatchCondition)(nil), "istio.proxy.v1.config.MatchCondition")
	proto.RegisterType((*DestinationWeight)(nil), "istio.proxy.v1.config.DestinationWeight")
	proto.RegisterType((*L4MatchAttributes)(nil), "istio.proxy.v1.config.L4MatchAttributes")
	proto.RegisterType((*HTTPRedirect)(nil), "istio.proxy.v1.config.HTTPRedirect")
	proto.RegisterType((*HTTPRewrite)(nil), "istio.proxy.v1.config.HTTPRewrite")
	proto.RegisterType((*StringMatch)(nil), "istio.proxy.v1.config.StringMatch")
	proto.RegisterType((*HTTPTimeout)(nil), "istio.proxy.v1.config.HTTPTimeout")
	proto.RegisterType((*HTTPTimeout_SimpleTimeoutPolicy)(nil), "istio.proxy.v1.config.HTTPTimeout.SimpleTimeoutPolicy")
	proto.RegisterType((*HTTPRetry)(nil), "istio.proxy.v1.config.HTTPRetry")
	proto.RegisterType((*HTTPRetry_SimpleRetryPolicy)(nil), "istio.proxy.v1.config.HTTPRetry.SimpleRetryPolicy")
}

func init() { proto.RegisterFile("proxy/v1/config/route_rule.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 975 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x5f, 0x6f, 0xdb, 0x54,
	0x14, 0xaf, 0x93, 0xa6, 0x4d, 0x4e, 0xd2, 0x2c, 0xb9, 0x94, 0xc9, 0x8b, 0xd0, 0x14, 0x65, 0x42,
	0x04, 0x21, 0x1c, 0xd6, 0x95, 0x31, 0x0d, 0x36, 0xd4, 0x32, 0xa6, 0x80, 0x0a, 0x9a, 0x6e, 0x03,
	0x13, 0x4f, 0x96, 0x63, 0x9f, 0x3a, 0x97, 0x25, 0xb6, 0x77, 0x7d, 0xdd, 0xd6, 0x12, 0x1f, 0x87,
	0x67, 0x1e, 0xf8, 0x1a, 0x48, 0x7c, 0x1c, 0x9e, 0x91, 0xef, 0xbd, 0x4e, 0xbc, 0xa4, 0x69, 0xda,
	0xbd, 0xf9, 0xfc, 0xf9, 0xfd, 0xee, 0xb9, 0xbf, 0x73, 0x7c, 0x2e, 0x74, 0x23, 0x1e, 0x5e, 0xa6,
	0x83, 0xf3, 0x87, 0x03, 0x37, 0x0c, 0xce, 0x98, 0x3f, 0xe0, 0x61, 0x22, 0xd0, 0xe6, 0xc9, 0x14,
	0xad, 0x88, 0x87, 0x22, 0x24, 0x1f, 0xb2, 0x58, 0xb0, 0xd0, 0x92, 0x79, 0xd6, 0xf9, 0x43, 0x4b,
	0xe5, 0x75, 0xee, 0xf9, 0x61, 0xe8, 0x4f, 0x71, 0x20, 0x93, 0xc6, 0xc9, 0xd9, 0xc0, 0x09, 0x52,
	0x85, 0xe8, 0xdc, 0x5f, 0x0e, 0x79, 0x09, 0x77, 0x04, 0x0b, 0x03, 0x1d, 0x5f, 0x39, 0x73, 0x22,
	0x44, 0x64, 0x9f, 0x39, 0xc9, 0x54, 0xe4, 0x0c, 0xcb, 0x19, 0xd3, 0xc3, 0x62, 0xbc, 0xf7, 0x77,
	0x05, 0x6a, 0x34, 0x2b, 0x94, 0x26, 0x53, 0x24, 0x04, 0xb6, 0x03, 0x67, 0x86, 0xa6, 0xd1, 0x35,
	0xfa, 0x35, 0x2a, 0xbf, 0x49, 0x17, 0xea, 0x1e, 0xc6, 0x82, 0x05, 0xf2, 0x60, 0xb3, 0x24, 0x43,
	0x45, 0x17, 0xb9, 0x0f, 0x10, 0x71, 0x74, 0xd1, 0xc3, 0xc0, 0x45, 0xb3, 0xdc, 0x35, 0xfa, 0x15,
	0x5a, 0xf0, 0x90, 0xaf, 0xa1, 0x32, 0x73, 0x84, 0x3b, 0x31, 0xb7, 0xbb, 0x46, 0xbf, 0x7e, 0xf0,
	0xb1, 0x75, 0xa5, 0x0e, 0xd6, 0x4f, 0x59, 0xce, 0x77, 0x61, 0xe0, 0xb1, 0x8c, 0x95, 0x2a, 0x0c,
	0x79, 0x0e, 0x15, 0x29, 0xa4, 0x59, 0xe9, 0x96, 0xfb, 0xf5, 0x83, 0xfe, 0x1a, 0xf0, 0x8b, 0x45,
	0x3d, 0xaf, 0x91, 0xf9, 0x13, 0x41, 0x15, 0x8c, 0x7c, 0x0b, 0x55, 0x8e, 0x1e, 0xe3, 0xe8, 0x0a,
	0x73, 0x47, 0x9e, 0xff, 0x60, 0x0d, 0xc5, 0x70, 0x34, 0x7a, 0x45, 0x75, 0x2a, 0x9d, 0x83, 0xc8,
	0x37, 0xb0, 0xcb, 0xf1, 0x82, 0x33, 0x81, 0xe6, 0xae, 0xc4, 0xf7, 0xae, 0xc5, 0xcb, 0x4c, 0x9a,
	0x43, 0xc8, 0x67, 0xd0, 0xbe, 0xc0, 0x71, 0x1c, 0xba, 0x6f, 0x50, 0xd8, 0x49, 0xe4, 0x73, 0xc7,
	0x43, 0xb3, 0xda, 0x35, 0xfa, 0x55, 0xda, 0x9a, 0x07, 0x7e, 0x51, 0x7e, 0x72, 0x02, 0x2d, 0xd9,
	0x40, 0x8e, 0x6f, 0x6d, 0xc1, 0x66, 0x18, 0x26, 0xc2, 0xac, 0x6d, 0x3c, 0x73, 0xa4, 0x32, 0x69,
	0x33, 0xc3, 0x52, 0x7c, 0xab, 0x6d, 0xf2, 0x63, 0x81, 0x8d, 0xa3, 0xe0, 0x0c, 0x63, 0x13, 0x24,
	0x5b, 0xf7, 0xda, 0x1b, 0x08, 0x9e, 0xce, 0xb9, 0xa8, 0xc2, 0x91, 0x21, 0xc0, 0x62, 0xb4, 0xcc,
	0xba, 0x64, 0xf9, 0xf4, 0x1a, 0x96, 0x97, 0x59, 0xde, 0x0f, 0xc1, 0xef, 0xe8, 0xca, 0x5e, 0xd6,
	0x32, 0xb0, 0xf4, 0x91, 0x63, 0xa8, 0xe6, 0x23, 0x68, 0x36, 0x24, 0xcf, 0x27, 0x6b, 0x78, 0x4e,
	0x0e, 0x97, 0x58, 0x76, 0xa7, 0xca, 0xd3, 0xfb, 0xaf, 0x0c, 0xcd, 0x77, 0xa7, 0x85, 0xdc, 0x85,
	0x9d, 0x38, 0x4c, 0xb8, 0x9b, 0xcf, 0xae, 0xb6, 0xc8, 0xaf, 0x50, 0x57, 0x5f, 0xb6, 0x70, 0xfc,
	0xd8, 0x2c, 0xc9, 0x21, 0xfa, 0xf2, 0x46, 0x13, 0x68, 0x9d, 0x4a, 0xe0, 0xc8, 0xf1, 0xe3, 0xef,
	0x83, 0x4c, 0x14, 0x88, 0xe7, 0x0e, 0xf2, 0x14, 0xca, 0xc2, 0x8d, 0xe4, 0xb0, 0xaf, 0x1f, 0xca,
	0x93, 0x43, 0xc9, 0x78, 0x24, 0x04, 0x67, 0xe3, 0x44, 0x60, 0x4c, 0x33, 0x50, 0x86, 0x4d, 0xbc,
	0x48, 0xff, 0x0d, 0xb7, 0xc0, 0x26, 0x5e, 0x44, 0x7e, 0x83, 0x86, 0x6c, 0xc4, 0x04, 0x1d, 0x0f,
	0x79, 0xac, 0xff, 0x8a, 0xc7, 0x37, 0xbb, 0xd0, 0x50, 0x88, 0x68, 0xa8, 0x80, 0xea, 0x46, 0xf5,
	0xc9, 0xc2, 0xd3, 0x79, 0x06, 0x77, 0x96, 0x6e, 0x4c, 0x5a, 0x50, 0x7e, 0x83, 0xa9, 0x96, 0x34,
	0xfb, 0x24, 0xfb, 0x50, 0x39, 0x77, 0xa6, 0x09, 0xea, 0x3d, 0xa0, 0x8c, 0xa7, 0xa5, 0x27, 0x46,
	0x67, 0x0c, 0xad, 0x65, 0xfe, 0x2b, 0xf0, 0x4f, 0x8a, 0xf8, 0xf5, 0x73, 0x7d, 0x2a, 0x38, 0x0b,
	0x7c, 0x59, 0x7e, 0xe1, 0x8c, 0xde, 0xbf, 0x06, 0xb4, 0x57, 0xfe, 0xf4, 0xe5, 0x0d, 0x65, 0xac,
	0x6e, 0xa8, 0x97, 0xb0, 0x5d, 0x68, 0xff, 0xc1, 0x4d, 0x77, 0x88, 0xb5, 0xe8, 0xbd, 0xc4, 0x67,
	0x53, 0x76, 0x21, 0x23, 0x7a, 0xcb, 0x69, 0xab, 0xf3, 0x15, 0xd4, 0xde, 0x4b, 0xb4, 0x9e, 0x0f,
	0xed, 0x95, 0x46, 0x93, 0x07, 0xb0, 0xa7, 0x67, 0x36, 0x4e, 0xc6, 0x01, 0x0a, 0xd3, 0xe8, 0x96,
	0xfb, 0x35, 0xda, 0x50, 0xce, 0x53, 0xe9, 0x23, 0x9f, 0x03, 0x29, 0xdc, 0x30, 0xcf, 0x2c, 0xc9,
	0xcc, 0x76, 0x21, 0xa2, 0xd2, 0x7b, 0xcf, 0xa1, 0x51, 0xdc, 0x6f, 0x59, 0x91, 0x09, 0x67, 0x79,
	0x91, 0x09, 0x67, 0xe4, 0x23, 0xa8, 0x39, 0x89, 0x98, 0x84, 0x9c, 0x89, 0x54, 0x17, 0xba, 0x70,
	0xf4, 0x9e, 0x41, 0xbd, 0xb0, 0xdf, 0x6e, 0x0d, 0x47, 0xa8, 0x17, 0x5a, 0x4a, 0xee, 0x42, 0x05,
	0x2f, 0x1d, 0x57, 0x28, 0x82, 0xe1, 0x16, 0x55, 0x26, 0x31, 0x61, 0x27, 0xe2, 0x78, 0xc6, 0x2e,
	0x15, 0xc3, 0x70, 0x8b, 0x6a, 0x3b, 0x43, 0x70, 0xf4, 0xf1, 0x52, 0x0a, 0x2f, 0x11, 0xd2, 0x3c,
	0x6e, 0x00, 0xc8, 0x77, 0xc2, 0x16, 0x69, 0x84, 0xbd, 0xbf, 0x4a, 0xaa, 0xcc, 0x7c, 0x05, 0xda,
	0xd0, 0x8c, 0xd9, 0x2c, 0x9a, 0xe2, 0x7c, 0x9d, 0x1a, 0x72, 0xec, 0x1e, 0x6f, 0x5e, 0xa7, 0xd6,
	0xa9, 0x04, 0x6a, 0xeb, 0x55, 0x38, 0x65, 0x6e, 0x3a, 0xdc, 0xa2, 0x7b, 0x71, 0xd1, 0x4d, 0x2c,
	0xd8, 0x71, 0x93, 0x58, 0x84, 0x33, 0x3d, 0xcf, 0xfb, 0x96, 0x7a, 0xb1, 0xad, 0xfc, 0xc5, 0xb6,
	0x8e, 0x82, 0x0c, 0xa6, 0xb3, 0x3a, 0x7f, 0xc0, 0x07, 0x57, 0xf0, 0x92, 0x47, 0xb0, 0xfb, 0x6e,
	0x81, 0xf7, 0x56, 0x78, 0x5e, 0xe8, 0x97, 0x9f, 0xe6, 0x99, 0xe4, 0x0b, 0xd8, 0x0f, 0xcf, 0x91,
	0x73, 0xe6, 0xa1, 0x5e, 0x07, 0xb6, 0x7c, 0xbc, 0x95, 0xf8, 0x24, 0x8f, 0xa9, 0x1f, 0xf2, 0x67,
	0x67, 0x86, 0xc7, 0x2d, 0x68, 0x6a, 0xb0, 0x1d, 0xc9, 0x83, 0x7b, 0xff, 0x94, 0xa0, 0x36, 0xdf,
	0xfa, 0xe4, 0x35, 0x34, 0xb4, 0x5c, 0xd9, 0x7b, 0x91, 0xea, 0x5a, 0x0e, 0x36, 0xbd, 0x16, 0x5a,
	0x2a, 0xf9, 0x3d, 0x17, 0xaa, 0x1e, 0x2f, 0x9c, 0xb7, 0x96, 0xe9, 0x4f, 0x03, 0xda, 0x2b, 0xa4,
	0xa4, 0x03, 0x55, 0x47, 0x08, 0x9c, 0x45, 0x22, 0x96, 0xa5, 0x55, 0xe8, 0xdc, 0x26, 0x47, 0x70,
	0x27, 0x42, 0x6e, 0x0b, 0x9e, 0xce, 0x5b, 0x5d, 0xda, 0xa4, 0xe4, 0x5e, 0x84, 0x7c, 0xc4, 0xd3,
	0xd1, 0x06, 0x3d, 0xcb, 0x6b, 0xf5, 0x6c, 0x42, 0x43, 0x0a, 0xa5, 0xd5, 0x1c, 0xef, 0xc8, 0x33,
	0x1e, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x62, 0x9a, 0xbe, 0x0b, 0x0a, 0x00, 0x00,
}
